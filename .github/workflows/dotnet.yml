name: Android Studio MUI from JetBrains (Auto)

on:
  push:
    branches: [ "development", "master" ]
  pull_request:
    branches: [ "development" ]
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4

    - name: 初始化
      run: |
        curl -s -X GET "https://data.services.jetbrains.com/products?code=IIU&release.type=release" > $HOME/list.json
        fileUrl=$(cat "$HOME/list.json" | jq -r ".[0].releases[0].downloads.windowsZip.link")
        fileBuild=$(cat "$HOME/list.json" | jq -r ".[0].releases[0].build")
        fileVersion=$(cat "$HOME/list.json" | jq -r ".[0].releases[0].version")
        fileCode=$(cat "$HOME/list.json" | jq -r ".[0].code")
        fileName=${fileCode}_${fileVersion}_${fileBuild}
        echo 文件名 $fileName 文件URL $fileUrl
        releaseName=${{github.event.repository.name}}_Actions_${fileName}
        tagName=$releaseName
        echo "releaseName=${releaseName}" >> $GITHUB_ENV
        echo "tagName=${tagName}" >> $GITHUB_ENV
        echo "fileUrl=$fileUrl" >> $GITHUB_ENV
        latestTagName=$(curl -s -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" \
          https://api.github.com/repos/${{github.repository}}/releases/latest | jq -r '.tag_name')
        echo 当前预发布标签名 $tagName 最新已发布标签名 $latestTagName
        if [[ "$latestTagName" == "$releaseName" ]]; then
          echo "$latestTagName 已发布，无需执行"
          echo "canExecute=false" >> $GITHUB_ENV
        else
          echo "canExecute=true" >> $GITHUB_ENV
        fi

    - name: 安装.NET
      if: ${{env.canExecute == 'true'}}
      uses: actions/setup-dotnet@v4

    - name: 构建HttpCompressionFileExtractor
      if: ${{env.canExecute == 'true'}}
      run: |
        cd ./HttpCompressionFileExtractor/HttpCompressionFileExtractor.Cli
        dotnet publish --configuration=Release --framework=net8.0 --runtime=linux-x64 --output=$HOME/Programs/HttpCompressionFileExtractor /p:PublishSingleFile=true
        echo 构建结果
        ls $HOME/Programs/HttpCompressionFileExtractor

    - name: 构建JetbrainsPluginVersionModifier
      if: ${{env.canExecute == 'true'}}
      run: |
        cd ./JetbrainsPluginVersionModifier/JetbrainsPluginVersionModifier
        dotnet publish --configuration=Release --framework=net8.0 --runtime=linux-x64 --output=$HOME/Programs/JetbrainsPluginVersionModifier /p:PublishSingleFile=true
        echo 构建结果
        ls $HOME/Programs/JetbrainsPluginVersionModifier

    - name: 运行HttpCompressionFileExtractor
      if: ${{env.canExecute == 'true'}}
      run: |
        cd $HOME/Programs/HttpCompressionFileExtractor
        ./HttpCompressionFileExtractor.Cli list --url=$fileUrl --search=localization-\\w+\\.jar --isRegex --isWebApi --isIndent > $HOME/HttpCompressionFileExtractor.json
        cat $HOME/HttpCompressionFileExtractor.json
        cat $HOME/HttpCompressionFileExtractor.json | jq -c '.data[]' | while read item; do
            fullName=$(echo "$item" | jq -r '.fullName')
            echo
            echo 开始下载 $fullName
            ./HttpCompressionFileExtractor.Cli download --url=$fileUrl --path=$fullName --output=$HOME/Outputs/$fullName --isWebApi --isIndent
        done
    
    - name: 运行JetbrainsPluginVersionModifier
      if: ${{env.canExecute == 'true'}}
      run: |
        $HOME/Programs/JetbrainsPluginVersionModifier/JetbrainsPluginVersionModifier --path=$HOME/Outputs --isWebApi --isIndent > $HOME/JetbrainsPluginVersionModifier.json
        cat $HOME/JetbrainsPluginVersionModifier.json
        echo
        cat $HOME/JetbrainsPluginVersionModifier.json | jq -c ".data[]" | while read item; do
            path=$(echo "$item" | jq -r ".path")
            echo "$path" >> $HOME/Files.txt
            echo 准备上传 $path
        done
        
    - name: 创建发布标记
      if: ${{env.canExecute == 'true'}}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{env.tagName}}
        release_name: ${{env.releaseName}}
        draft: false
        prerelease: false

    - name: 上传最终产物
      if: ${{env.canExecute == 'true'}}
      id: find_and_upload_files
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        while IFS= read -r file; do
          basename=$(basename "$file" .jar)
          GITHUB_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
          GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\{*}"
          GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\?*}"
          curl \
            -X POST \
            -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"${file}" \
            "${GITHUB_UPLOAD_URL}?name=${basename}.jar&label=${tagName}_${basename}.jar"
        done < $HOME/Files.txt
